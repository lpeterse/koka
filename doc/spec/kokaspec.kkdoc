<!DOCTYPE html>
<html>
<!-- NO_CLICK_TRACKING -->
<!--
  Copyright 2012 Microsoft Corporation.
 
  This is free software; you can redistribute it and/or modify it under the
  terms of the Apache License, Version 2.0. A copy of the License can be
  found in the file "license.txt" at the root of this distribution.
-->

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />

<style type="text/css">
.koka .plaincode, .koka a.pp .pc { display: none; } .koka a.pp { color: inherit; text-decoration: none; }
</style>
<link rel="stylesheet" type="text/css" href="styles/koka.css" /> 
<style type="text/css">
body {
  margin: 2em 12% 2em 8%;
}

h3 {
  font-size: 120%;
}

.koka.source,
.koka.source.unchecked {
  margin-left: 2ex;  
  background-color: white;
  border: none;
  /* border-left: 1px solid #DDD; */
}

.koka.source.unchecked {
  /* border-left: 1px dashed #DDD ; */
}

.grammar table,
table.grammar  {   
  margin: 0.5ex 0.5ex 0.5ex 2ex;
  padding: 0.5ex 1ex 0.5ex 1ex;
  /*
  background-color: #FAFAFA;
  border: solid 1px #DDD;
  */
}

.grammar .code,
.grammar code {
  padding: 0pt;
}

.grammar .bar {
  padding: 0ex 0.5ex;
}

.grammar td:nth-child(2) {
  font-style: normal; 
  padding: 0em 1ex;
  text-align: center;
}

.grammar.thin,
.grammar .bar
.grammar td:nth-child(2) {
  font-family: Georgia, sans-serif;  /* a thinner font, widely available */
}


.grammar td:nth-child(4) {
  font-style: normal; 
  padding-left: 2ex;
}

.grammar td {
  white-space: nowrap;
}
.grammar .code, .grammar code,
.grammar .pre, .grammar pre {
  font-weight: bold;
}

table .kw, table .tp, table .co,
.grammar .keyword, .grammar .kw,
.grammar .type, .grammar .tp,
.grammar .constructor, .grammar .co {
  color: black;
}

.nt {
  font-style: italic;
}          

.opt, .many {   
  padding: 0ex 0.5ex;
}

#toc {
  display: none;
}

#toc li>a,
.toc-num>a {
  color: black;
  text-decoration: none;
}
#toc li>a:hover,
.toc-num>a:hover {
  color: black;
  border-bottom: 1px dotted blue;
}
#toc li {
  padding-top: 0.1ex;
}
#toc>div>ul>li {
  padding-top: 0.25ex;
}

#toc ul {
  list-style-type: none;
  margin-left: 0ex;
  padding-left: 0ex;
} 
#toc ul {
  font-size: 110%;
}

#toc ul ul {
  margin-left: 1.5em;
  font-size: 90%;
}

.toc-num {
  font-size: 80%;
  margin-right: 0.5em;
}

#toc-toggle {
  cursor: pointer;
  vertical-align: center;
  margin-right: 10px;
  font-size: 16pt;
}
</style>

<script type='text/javascript'>

function genTOC() {
  var toc = document.getElementById('toc');  
  if (toc == null) return;

  var empty = ' '.substr(1);
  var elems = document.getElementsByTagName('*');
  var i = 0;
  
  var localToc = document.createElement('div'); 
  var tocToggle = document.getElementById('toc-toggle');
  
  function showToc() {
    localToc.style.display = 'block';
    if (tocToggle){
      tocToggle.innerHTML = '&#x25BC;'
      tocToggle.style.fontSize = '12pt'
    }
  }
  function hideToc() {
    localToc.style.display = 'none';
    if (tocToggle) {
      tocToggle.innerHTML = '&#x25B6;';    
      tocToggle.style.fontSize = '16pt';
    }
  }
  function switchToc() {
    (localToc.style.display != 'none' ? hideToc() : showToc());
  }
  if (tocToggle) tocToggle.onclick = switchToc;
  hideToc();

  function genHeaders(toc,tocNum,level) {
    var match = null;
    var num = 1;
    var appendix = -1;
    var ul = null;
    var li = null;
    while(i < elems.length) {
      var elem = elems[i];
      match = elem.tagName.match(/^[hH]([0-9])$/);      
      if (match && elem.className.indexOf('notoc') < 0) {
        var newLevel = (match[1]||0);
        if (newLevel <= level) return;
        i++;
        if (ul == null) {
          ul = document.createElement('ul');
          toc.appendChild(ul);
        }  
        if (!(newLevel != level+1 && li != null)) {
          var li = document.createElement('li');
          ul.appendChild(li);
          if (elem.className.indexOf("appendix") >= 0) {
            if (appendix < 0) appendix = num;
            var liNum = tocNum + String.fromCharCode("A".charCodeAt(0) + num - appendix) + '.';     
          }
          else {
            var liNum = tocNum + num + '.'; 
          }
          num++;
        }
        if (newLevel == level+1) {
          var id = elem.id;
          if (id==null||id.length==0) {
            id = 'sec:' + liNum;
            elem.id = id;
          }
          var liNumDisplay = (level <= 2 ? liNum : empty);
          li.innerHTML= '<span class=\'toc-num\'>' + liNumDisplay + '</span><a href=\'#' + id + '\'>' + elem.innerHTML + '</a>';
          var aref = document.createElement('a');
          aref.setAttribute('href','#toc');
          aref.onclick = showToc;
          aref.innerHTML = liNumDisplay;
          var spanNum = document.createElement('span');
          spanNum.className = 'toc-num';
          spanNum.appendChild(aref);
          elem.insertBefore(spanNum,elem.firstChild);
          //elem.innerHTML = spanTocNum('<a href=\'#toc\'>' + liNumDisplay + '</a>') + elem.innerHTML;
        }
        else {
          i--;
          genHeaders(li,liNum,level+1);        
        }
      }
      else {
        i++;
      }
    }
  }
  genHeaders(localToc,'',0);
  toc.appendChild(localToc);
  toc.style.display = 'block'; /* make it visible */
}

function genFullGrammar() {
  var fullLex = "";
  var fullParse = "";
  var spacing = "<tr><td>&nbsp;</td></tr>";
  var gs = document.getElementsByClassName("grammar");
  for(var i = 0; i < gs.length; i++) {
    var elem = gs[i];
    if (elem.tagName.toLowerCase() != "table") continue;
    if (elem.className.indexOf("lex") >= 0) fullLex += elem.innerHTML + spacing;
    else if (elem.className.indexOf("parse") >= 0) fullParse += elem.innerHTML + spacing;
  }
  var div = document.createElement("div");
  div.innerHTML="<h2>Lexical syntax</h2>\n<table class='grammar'>\n"+
                fullLex + "</table>\n" +
                "<h2>Context-free syntax</h2>\n<table class='grammar'>\n" +
                fullParse + "</table>";
  document.body.appendChild(div);                  
}

window.onload = function() { genFullGrammar(); genTOC(); };
</script>
<title>Koka language specification</title>
</head>

<body>
<xmp>
<div id="toc">
<h2 class="notoc"><span id="toc-toggle"></span>Table of contents
</div>


# Koka language specification

This is the draft language specification of the Koka language, version 0.1.<br>
Currently only the lexical and context-free grammar and the layout rule are specified. 
The [standard libraries](toc.html) are documented separately.

# Lexical syntax

We define the grammar and lexical syntax of the language using standard BNF notation where non-terminals are generated by alternative patterns:
<div class="grammar">
  |  |  | 
--- | --- | --- | ---
_nonterm_ | ::= | _pattern_<sub>1</sub> <span class="bar">&#124;</span> _pattern_<sub>2</sub> | 
</div>
In the patterns, we use the following notations:

<div class="grammar">
  |  |  | 
--- | --- | --- | ---
"terminal" |  |  | A terminal symbol
`x0A` |  |  | A character with hexadecimal code 0A
`a..f` |  |  | The characters from a to f
&nbsp; |  |  |
( _pattern_ ) |  |  | Grouping
[ _pattern_ ] |  |  | Optional occurrence of _pattern_
{ _pattern_ } |  |  | Zero or more occurrences of _pattern_
_pattern_<sub>1</sub> <span class="bar">&#124;</span> _pattern_<sub>2</sub> | |  | Choice: either _pattern_<sub>1</sub> or _pattern_<sub>2</sub>
&nbsp; |  |  |
_pattern_<sub>&lt;_diff_&gt;</sub> |  |  | Difference: elements generated by _pattern_ except those in _diff_
_nonterm_<sub>[_lex_]</sub> |  |  | Generate _nonterm_ by drawing lexemes from _lex_
</div>
Care must be taken to distinguish meta-syntax such as <span class="grammar thin">|</span> and <span class="grammar">)</span> from concrete terminal symbols as <span class="grammar"><span class="koka code">|</span></span> and <span class="grammar">`)`</span>. 

## Source code

Source code consists of a sequence of 8-bit characters. Valid characters in
actual program code consists strictly of ASCII characters which range from 0
to 127 and can be encoded in 7-bits. Only comments, string literals, and
character literals are allowed to contain extended 8-bit characters. This
means that one cannot write identifiers or operators that use unicode symbols.

## Encoding

A program source is assumed to be UTF-8 encoded which allows comments, string
literals, and character literals to contain (encoded) unicode characters.
Moreover, the grammer is designed such that a lexical analyzer and parser can
directly work on source files without doing UTF-8 decoding or unicode category
identification. To further facilitate the processing of UTF-8 encoded files
the lexical analyzer ignores an initial byte-order mark that some UTF-8
encoders insert. In particular, any program source is allowed to start with
three byte-order mark bytes `0xEF`, `0xBB`, and `0xBF`, which are ignored.

## Lexical grammar

In the specification of the lexical grammar all white space is explicit and
there is no implicit white space between juxtaposed symbols. The lexical token
stream is generated by the non-terminal _lex_ which consists of lexemes and
whitespace.

Before doing lexical analysis, there is a _linefeed_ character inserted at the
start and end of the input, which makes it easier to specify line comments and
directives. 

### Lexical tokens

<table class="grammar lex">
<tr><td>_lex_ </td><td> ::=</td><td><span class="many">{ _whitespace_ <span class="bar">|</span> _lexeme_ }</span></td></tr>
<tr><td>_lexeme_&nbsp;&nbsp;</td><td>::=</td><td>_conid_ <span class="bar">|</span> _qconid_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_varid_ <span class="bar">|</span> _qvarid_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_op_ <span class="bar">|</span> _opid_ <span class="bar">|</span> _qopid_ <span class="bar">|</span> _wildcard_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_natural_ <span class="bar">|</span> _float_ <span class="bar">|</span> _string_ <span class="bar">|</span> _char_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_reserved_ <span class="bar">|</span> _reservedop_ <span class="bar">|</span> _special_</td></tr>
</table>

### Identifiers
<table class="grammar lex">
<tr><td>_qconid_</td><td>::=</td><td>_modulepath_ _conid_</td></tr>
<tr><td>_qvarid_</td><td>::=</td><td>_modulepath_ _lowerid_  </td></tr>
<tr><td>_modulepath_</td><td>::=</td><td>_lowerid_ "/" <span class="many">{ _lowerid_ "/" }</span></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_conid_</td><td>::=</td><td>_upperid_</td></tr>
<tr><td>_varid_</td><td>::=</td><td>_lowerid_<sub>&lt;_reserved_&gt;</sub></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_lowerid_</td><td>::=</td><td>_lower_ <span class="many">{ _idchar_ }</span> </td></tr>
<tr><td>_upperid_</td><td>::=</td><td>_upper_ <span class="many">{ _idchar_ }</span></td></tr>
<tr><td>_idchar_</td><td>::=</td><td>_letter_ <span class="bar">|</span> _digit_ <span class="bar">|</span> `_` </td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_wildcard_</td><td>::=</td><td>`_` <span class="many">{ _idchar_ }</span></td></tr>
<tr><td>_typevarid_</td><td>::=</td><td>_letter_ <span class="many">{ _digit_ }</span></td></tr>
<tr><td></td></tr>
<tr><td>_reserved_</td><td>::=</td><td>"infix" <span class="bar">|</span> "infixr" <span class="bar">|</span> "infixl" <span class="bar">|</span> "prefix" </td></tr>
<tr><td> </td><td><span class="bar">|</span></td><td>"type" <span class="bar">|</span> "cotype" <span class="bar">|</span> "rectype" <span class="bar">|</span> "alias"</td></tr> 
<tr><td> </td><td><span class="bar">|</span></td><td>"forall" <span class="bar">|</span> "exists" <span class="bar">|</span> "some"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"fun" <span class="bar">|</span> "function" <span class="bar">|</span> "val" <span class="bar">|</span> "var" <span class="bar">|</span> "con"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"if" <span class="bar">|</span> "then" <span class="bar">|</span> "else" <span class="bar">|</span> "elif" <span class="bar">|</span> "match" <span class="bar">|</span> "return"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"module" <span class="bar">|</span> "import" <span class="bar">|</span> "as"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"public" <span class="bar">|</span> "private" <span class="bar">|</span> "abstract" </td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"interface" <span class="bar">|</span> "instance" <span class="bar">|</span> "with"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"external" <span class="bar">|</span> "inline" <span class="bar">|</span> "include"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"yield" <span class="bar">|</span> "qualified" <span class="bar">|</span> "hiding" </td><td>(future reserved words)</td></tr>
</table>

### Operators and symbols

<table class="grammar lex">
<tr><td>_qopid_</td><td>::=</td><td>_modulepath_ _opid_ </td></tr>
<tr><td>_opid_</td><td>::=</td><td>"(" _symbols_ ")"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_op_</td><td>::=</td><td>_symbols_<sub>&lt;_reservedop_ <span class="bar">|</span> _typeop_&gt;</sub></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_symbols_</td><td>::=</td><td>_symbol_ <span class="many">{ _symbol_ } <span class="bar">|</span> `/`</span></td></tr>
<tr><td>_symbol_</td><td>::=</td><td>"$" <span class="bar">|</span> "%" <span class="bar">|</span> `&` <span class="bar">|</span> "*" <span class="bar">|</span> "+"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>`"` <span class="bar">|</span> "!" <span class="bar">|</span> "\" <span class="bar">|</span> "^" <span class="bar">|</span> `#`</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>`=` <span class="bar">|</span> `.` <span class="bar">|</span> `:` <span class="bar">|</span> "-" <span class="bar">|</span> "?"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td><span class="koka code">|</span> <span class="bar">|</span> "<" <span class="bar">|</span> ">"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_special_</td><td>::=</td><td>"{" <span class="bar">|</span> "}" <span class="bar">|</span> "(" <span class="bar">|</span> ")" <span class="bar">|</span> "[" <span class="bar">|</span> "]" <span class="bar">|</span> ";" <span class="bar">|</span> "," <span class="bar">|</span><code>&#96;</code></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_reservedop_</td><td>::=</td><td>"=" <span class="bar">|</span> "." <span class="bar">|</span> <span class="koka code keyword">:</span> <span class="bar">|</span> "->"</td></tr>
<tr><td>_typeop_</td><td>::=</td><td>">" _anglebar_ <span class="many">{ _anglebar_ }</span></td></tr>    
<tr><td></td><td><span class="bar">|</span></td><td>"<" _anglebar_ <span class="many">{ _anglebar_ }</span></td></tr>
<tr><td></td><td><span class="bar">|</span></td><td><span class="koka code">|</span> _angle_ <span class="many">{ _symbol_ }</span></td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"-><" <span class="many">{ _symbol_ }</span></td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>`:?` <span class="many">{ _symbol_ }</span></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_anglebar_</td><td>::=</td><td><span class="koka code">|</span> <span class="bar">|</span> _angle_</td></tr>
<tr><td>_angle_</td><td>::=</td><td>"<" <span class="bar">|</span> ">"
</table>

### Literals
<table class="grammar lex">
<tr><td>_string_</td><td>::=</td><td>`@"` <span class="many">{ _graphic_<sub>&lt;`"`&gt;</sub> <span class="bar">|</span> _utf8_ <span class="bar">|</span> _space_ <span class="bar">|</span> _tab_ <span class="bar">|</span> _newline_ <span class="bar">|</span> `""` }</span> `"`</td><td>(raw string)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>`"` <span class="many">{ _graphic_<sub>&lt;`"`<span>|</span>`\`&gt;</sub> <span class="bar">|</span> _utf8_ <span class="bar">|</span> _space_ <span class="bar">|</span> _escape_ }</span> `"`</td></tr>
<tr><td>_char_</td><td>::=</td><td>`'` ( _graphic_<sub>&lt;`'`<span>|</span>`\`&gt;</sub> <span class="bar">|</span> _utf8_ <span class="bar">|</span> _space_ <span class="bar">|</span> _escape_ ) `'`</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_escape_</td><td>::=</td><td>`\` ( _charesc_ <span class="bar">|</span> _hexesc_ )</td></tr>
<tr><td>_charesc_</td><td>::=</td><td>"n" <span class="bar">|</span> "r" <span class="bar">|</span> "t" <span class="bar">|</span> `\` <span class="bar">|</span> `"` <span class="bar">|</span> `'` </td></tr>
<tr><td>_hexesc_</td><td>::=</td><td>"x" _hexdigit_<sub>2</sub>
<span class="bar">|</span>   "u" _hexdigit_<sub>4</sub>
<span class="bar">|</span>   `U` _hexdigit_<sub>4</sub> _hexdigit_<sub>2</sub></td></tr>
<tr><td>_hexdigit_<sub>4</sub></td><td>::=</td><td>_hexdigit_ _hexdigit_ _hexdigit_ _hexdigit_</td></tr>
<tr><td>_hexdigit_<sub>2</sub></td><td>::=</td><td>_hexdigit_ _hexdigit_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_float_</td><td>::=</td><td>_decimal_ "." _decimal_ <span class="opt">[_exponent_]</span></td></tr>
<tr><td>_exponent_</td><td>::=</td><td>(`e` | `E`) <span class="opt">[`-` | "+"]</span> _decimal_</td></tr>
<tr><td>_natural_</td><td>::=</td><td>_decimal_ <span class="bar">|</span> "0" &nbsp; (`x` | `X`) _hexadecimal_</td></tr>
<tr><td>_decimal_</td><td>::=</td><td>_digit_ <span class="many">{ _digit_ }</span></td></tr>
<tr><td>_hexadecimal_</td><td>::=</td><td>_hexdigit_ <span class="many">{ _hexdigit_ }</span></td></tr>
</table>

### White space

<table class="grammar lex">
<tr><td>_whitespace_</td><td>::=</td><td>_white_ <span class="many">{ _white_ }</span></td></tr>
<tr><td>_white_</td><td>::=</td><td>_newline_ <span class="bar">|</span> _space_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_linecomment_ <span class="bar">|</span> _blockcomment_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_linedirective_</td></tr>  
<tr><td>&nbsp;</td></tr>
<tr><td>_linecomment_</td><td>::=</td><td>`//` <span class="many">{ _linechar_ }</span> _newline_</td></tr>
<tr><td>_linedirective_</td><td>::=</td><td>_newline_ `#` <span class="many">{ _linechar_ } _newline_</span></td></tr>
<tr><td>_linechar_</td><td>::=</td><td>_graphic_ <span class="bar">|</span> _utf8_ <span class="bar">|</span> _space_ <span class="bar">|</span> _tab_</tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_blockcomment_</td><td>::=</td><td><code>/&#42;</code> _blockpart_ <span class="many">{ _blockcomment_ _blockpart_ }</span> <code>&#42;/</code></td><td>(allows nested comments)</td></tr>
<tr><td>_blockpart_</td><td>::=</td><td>_blockchars_<sub>&lt;_blockchars_ (<code>/&#42;</code><span class="bar">|</span><code>&#42;/</code>) _blockchars_&gt;</sub></td></tr>
<tr><td>_blockchars_</td><td>::=</td><td><span class="many">{ _blockchar_ }</span></td></tr>
<tr><td>_blockchar_</td><td>::=</td><td>_graphic_ <span class="bar">|</span> _utf8_ <span class="bar">|</span> _space_ <span class="bar">|</span> _tab_ <span class="bar">|</span> _newline_</td></tr>
</table>

### Character classes

<table class="grammar lex">
<tr><td>_letter_</td><td>::=</td><td>_upper_ <span class="bar">|</span> _lower_</td></tr>
<tr><td>_upper_</td><td>::=</td><td>`A..Z`</td></tr>
<tr><td>_lower_</td><td>::=</td><td>`a..z`</td></tr>
<tr><td>_digit_</td><td>::=</td><td>`0..9`</td></tr>
<tr><td>_hexdigit_</td><td>::=</td><td>`a..f` <span class=`bar`>|</span> `A..F` <span class=`bar`>|</span> _digit_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_newline_</td><td>::=</td><td><span class="opt">[_return_]</span> _linefeed_</td><td>(windows or unix style end of line)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_space_</td><td>::=</td><td>`x20`</td><td>(a space)</td></tr>
<tr><td>_tab_</td><td>::=</td><td>`x09`</td><td>(a tab (`\t`))</td></tr>
<tr><td>_linefeed_</td><td>::=</td><td>`x0A`</td><td>(a line feed (`\n`))</td></tr>
<tr><td>_return_</td><td>::=</td><td>`x0D`</td><td>(a carriage return (`\r`))</td></tr>
<tr><td>_graphic_</td><td>::=</td><td>`x21`..`x7E`</td><td>(a visible character)</td></tr>
<tr><td>&nbsp;</td></tr>
<!--<tr><td> valid UTF-8 sequences, see also \url{http://www.w3.org/2005/03/23-lex-U}</td></tr>-->
<tr><td>_utf8_</td><td>::=</td><td>`xC0` `x80`</td><td>(encoded 0 character)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>(`xC2`..`xDF`) _cont_</td></tr>  
<tr><td></td><td><span class="bar">|</span></td><td>`xE0` (`xA0`..`xBF`) _cont_</td></tr> 
<tr><td></td><td><span class="bar">|</span></td><td>(`xE1`..`xEC`) _cont_ _cont_</td></tr> 
<tr><td></td><td><span class="bar">|</span></td><td>`xED` (`x80`..`x9F`) _cont_</td></tr> 
<tr><td></td><td><span class="bar">|</span></td><td>(`xEE`..`xEF`) _cont_ _cont_</td></tr> 
<tr><td></td><td><span class="bar">|</span></td><td>`xF0` (`x90`..`xBF`) _cont_ _cont_</td></tr> 
<tr><td></td><td><span class="bar">|</span></td><td>(`xF1`..`xF3`) _cont_ _cont_ _cont_</td></tr> 
<tr><td></td><td><span class="bar">|</span></td><td>`xF4` (`x80`..`x8F`) _cont_ _cont_</td></tr>
<tr><td>_cont_</td><td>::=</td><td>`x80`..`xBF`</td></tr>            
</table>

<h2 id="sec:layout">Semicolon insertion</h2>

Just like programming languages like 
[Haskell](http://www.haskell.org/onlinereport/haskell2010/haskellch10.html#x17-17800010.3),
[Python](http://docs.python.org/2/reference/lexical_analysis.html),
[JavaScript](http://bclary.com/2004/11/07/index.html#a%2D7%2E9),
[Scala](http://books.google.com/books?id=MFjNhTjeQKkC&amp;pg=PA65),
[Go](http://golang.org/ref/spec#Semicolons), etc., there is a layout rule
which automatically adds semicolons at appropiate places. This enables the
programmer to leave out most semicolons.

<p class="grammar">Koka will insert semicolons automatically for any statements and declarations that are <em>aligned between curly braces</em> ("{" and "}"). For example, in the following program:</p>
""
function eq1( x : int, y : int ) : io bool 
{  
  print("calculate equality")
  result = if (x == y) then True            
              else False
  result
}  
"

we get semicolons before each statement that was aligned between the braces:

""
function eqSemi( x : int, y : int ) : io bool 
{;  
  print("calculate equality");
  result = if (x == y) then True            
              else False;
  result;
}  
"

Since semicolons are only inserted for <em>aligned</em> statements, we can write a long statement on multipe lines by using more indentation:

""
function eq2( x : int, y : int ) : io bool 
{  
  print("calculate " +
         "equ" +
         "ality")
  result = if (x == y)
            then True 
            else False
  result
}  
"

In contrast to token-based layout rules, as in 
[Scala](http://books.google.com/books?id=MFjNhTjeQKkC&amp;pg=PA65) or
[Go](http://golang.org/ref/spec#Semicolons) for example, this
allows you to put line breaks at any point in a statement by just indenting
more. Moreover, it means that the visual indentation of a program corresponds
directly to how the compiler interprets the statements. Many tricky layout
examples in other programming languages are often based on a mismatch between
the visual representation and how a compiler interprets the tokens. With
Koka's layout rule, there is no such mismatch.

<p class="grammar">To still allow for &ldquo;block-style&rdquo; layout, the
layout rule does not insert a  semi-colon for an aligned statement if it
starts with "then", "else", "elif", or one of "{", ")", or "]".</p>

""
function foo()
{  
  val xs = [ 
    "list",
    "elements",
  ]
  if (odd(randomInt())) 
  {
    print("odd")
  }
  else 
    print("even")
}  
"

Of course, it is still allowed to use semicolons explicitly which can be used
for example to put multiple statements on a single line:

""
function equalLine( x : int, y : int ) : io bool {
  print("calculate equality"); (x == y) 
}  
"

The layout algorithm also checks for invalid layouts where the layout would
not visually correspond to how the compiler interprets the tokens. In
particular, it is illegal to indent less than the layout context or to put
comments into the indentation (because of tabs or potential unicode
characters). For example, the program:

"
function equal( x : int, y : int ) : io bool {   
    print("calculate equality")
  result = if (x == y) then True   // wrong: too little indentation
  /* wrong */      else False
    result
}  
"

is rejected. In order to facilitate code generation or source code
compression, compilers are also required to support a mode where the layout
rule is not applied and where no semicolons are inserted. A recognized command
line flag for that mode should be `--nolayout`.

### The layout algorithm

The layout rule is natural to humans since semicolon insertion corresponds
directly to the visual two-dimensional layout of the program. The formal
specification of the layout rule is a bit more technical though since a
compiler interprets source code as a linear one-dimensional sequence. To
define the layout algorithm formally, we first establish some terminology:

* A new line is started after every _linefeed_ character.
* Any non-_white_ token is called a _lexeme_, where a line without lexemes is called _blank_.
* The indentation of a lexeme is the column number of its first character on that 
  line (starting at 1), and the indentation of a line is the indentation of the 
  first lexeme on the line.

Because braces can be nested, we use a _layout stack_ of strictly
increasing indentations. The top indentation on the layout stack holds the
_layout indentation_. The initial layout stack contains the single
value 0 (which is never popped). The operations on the layout stack are always
done before the semicolon insertion:

* <span class="grammar"> _Layout stack operations_: If the previous lexeme was an
  open brace "{" or the start of the lexical token sequence, we push the
  indentation of the current lexeme on the layout stack. The pushed indentation
  must be larger than the previous layout indentation (unless the current lexeme
  is a closing brace).  When a closing brace "}" is encountered the top
  indentation is popped from the layout stack.</span>

* <span class="grammar"> _Semicolon insertion_: For each non-blank line, the
  indentation must be equal or larger to the layout indentation. A semicolon is
  inserted before the line whenever the indentation is equal, unless the first
  lexeme on the line is one of "then", "else", "elif", or one of "{", ")", or
  "]". Also, a semicolon is always inserted before a closing brace "}" and
  before the end of the token sequence.</span>

As defined, semicolons are inserted whenever statements or declarations are
aligned, unless the lexeme happens to be a clear statement continuation. To
simplify the grammar specification, a semicolon is also always inserted before
a closing brace and the end of the source. This allows us to specify many
grammar elements as ended by semicolons instead of separated by semicolons
which is more difficult to specify for a LALR(1) grammar.

Semicolon insertion can be easily implemented as part of the lexer, but could
also be implemented as a straightforward transformation on the lexical token
stream. In particular, there are no intricate dependencies with the parser
that lead to bizarrely complex layout rules, as is the case in languages like
[Haskell](http://www.haskell.org/onlinereport/haskell2010/haskellch10.html#x17-17800010.3) or 
[JavaScript](http://bclary.com/2004/11/07/index.html#a%2D7%2E9).

## Implementation

There is a full [Flex (Lex) implementation](https://koka.codeplex.com/SourceControl/latest#doc/spec/grammar/lexer.lex) of lexical analysis, which
includes an implementation of the layout rule. Ultimately, the Flex
implementation serves as _the_ specification, and this document and the
Flex implementation should always be in agreement.

# Context-free syntax

The grammar specification starts with the non terminal _module_ which draws
its lexical tokens from _lex_ where all _whitespace_ tokens are implicitly
ignored.

## Modules

<table class="grammar parse">
<tr><td>_module_<sub><span class="opt">[_lex_]</span></sub></td><td>::=</td><td><span class="opt">[_moduledecl_]</span> _modulebody_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_moduledecl_</td><td>::=</td><td><span class="opt">[_semis_]</span>  <span  class="opt">[_visibility_]</span> "module" _moduleid_</td></tr>
<tr><td>_moduleid_</td><td>::=</td><td>_qvarid_ <span class="bar">|</span> _varid_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_modulebody_</td><td>::=</td><td> "{" <span class="opt">[_semis_]</span> _declarations_ "}" <span class="opt">[_semis_]</span></td></tr>
<tr><td></td><td><span class="bar">|</span></td><td><span class="opt">[_semis_]</span> _declarations_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_visibility_</td><td>::=</td><td>"public" <span class="bar">|</span> "private"</td></tr>
<tr><td>_semis_</td><td>::=</td><td>";" <span class="many">{ ";" }</span></td></tr>
</table>

## Top level declarations
<table class="grammar parse">
<tr><td>_declarations_</td><td>::=</td><td><span class="many">{ _import_ _semis_ }</span> <span class="many">{ _fixitydecl_ _semis_ }</span> <span class="many">{ _topdecl_ _semis_ }</span></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_import_</td><td>::=</td><td><span  class="opt">[_visibility_]</span> "import" <span class="opt">[_moduleid_ "="]</span> _moduleid_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_fixitydecl_</td><td>::=</td><td><span  class="opt">[_visibility_]</span> _fixity_ _natural_ _identifier_ <span class="many">{ "," _identifier_ }</span></td></tr>
<tr><td>_fixity_</td><td>::=</td><td>"infixl"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"infixr"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"infix"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_topdecl_</td><td>::=</td><td><span class="opt">[_visibility_]</span> _puredecl_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td><span class="opt">[_visibility_]</span> _aliasdecl_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td><span class="opt">[_visibility_]</span> _typedecl_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td><span class="opt">[_visibility_]</span> _externdecl_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"abstract " _typedecl_</td></tr>
</table>

## Type declarations
<table class="grammar parse">
<tr><td>_aliasdecl_</td><td>::=</td><td>"alias" _typeid_ <span class="opt">[_typeparams_]</span> <span class="opt">[_kannot_]</span> "=" _type_</td></tr>
<tr><td>_typedecl_</td><td>::=</td><td>_typesort_ _typeid_ <span class="opt">[_typeparams_]</span> <span class="opt">[_kannot_]</span> <span class="opt">[_typebody_]</span></td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"struct" _typeid_ <span class="opt">[_typeparams_]</span> <span class="opt">[_kannot_]</span> <span class="opt">[_conparams_]</span></td></tr>
<tr><td>_typesort_</td><td>::=</td><td>"type" <span class="bar">|</span> "cotype" <span class="bar">|</span> "rectype"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_typeid_</td><td>::=</td><td>_varid_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>`[]`</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" <span class="many">{ "," }</span> ")"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"<" ">"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"<" <span class="koka code">|</span> ">"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_typeparams_</td><td>::=</td><td>"<" <span class="opt"><span class="opt">[_tbinders_]</span></span> ">"</td></tr>
<tr><td>_tbinders_</td><td>::=</td><td>_tbinder_ <span class="many">{ "," _tbinder_ }</span></td></tr>
<tr><td>_tbinder_</td><td>::=</td><td>_varid_ <span class="opt">[_kannot_]</span></td></tr>
<tr><td>_typebody_</td><td>::=</td><td>"{" <span class="opt">[_semis_]</span> <span class="many">{_constructor_ _semis_ }</span> "}"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_constructor_</td><td>::=</td><td><span class="opt">["con"]</span> <span class="opt">[_equantifier_]</span> _conid_ <span class="opt">[_conparams_]</span></td></tr>
<tr><td>_conparams_</td><td>::=</td><td>"(" <span class="opt">[_conparam_ <span class="many">{ "," _conparam_ }</span>]</span> ")"</td></tr>
<tr><td>_conparam_</td><td>::=</td><td><span class="opt">[_paramid_]</span> `:` _paramtype_ <span class="opt">["=" _expr_]</span>
</table>

## Value and function declarations
<table class="grammar parse">
<tr><td>_puredecl_</td><td>::=</td><td>"val" _valdecl_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>("fun" <span class="bar">|</span> "function") _fundecl_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_valdecl_</td><td>::=</td><td>_binder_ "=" _expr_</td></tr>
<tr><td>_binder_</td><td>::=</td><td>_identifier_ <span class="opt">[`:` _type_]</span></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_fundecl_</td><td>::=</td><td><span class="opt">[_quantifiers_]</span> _funid_ _fundef_ (_block_ <span class="bar">|</span> "=" _blockexpr_)</td></tr>
<tr><td>_fundef_</td><td>::=</td><td>_parameters_ <span class="opt">[_annotres_]</span> <span class="opt">[_sigqualifier_]</span> <span class="opt">[_annotfull_]</span></td></tr>
<tr><td>_funid_</td><td>::=</td><td>_identifier_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>`[` <span class="many">{ "," }</span> `]`</td><td>(indexing operator)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_parameters_</td><td>::=</td><td>"(" <span class="opt">[_parameter_ <span class="many">{ "," _parameter_ }</span>]</span> ")"</td></tr>
<tr><td>_parameter_</td><td>::=</td><td>_paramid_ <span class="opt">[ `:` _paramtype_]</span> <span class="opt">["=" _expr_]</span></td></tr>
<tr><td>_paramid_</td><td>::=</td><td>_identifier_ <span class="bar">|</span> _wildcard_</td></tr>
<tr><td>_paramtype_</td><td>::=</td><td>_type_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"?" _type_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_annotres_</td><td>::=</td><td>`:` _tresult_</td></tr>
<tr><td>_annotfull_</td><td>::=</td><td>`::` _typesig_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_qidentifier_</td><td>::=</td><td>_qvarid_ <span class="bar">|</span> _qidop_ <span class="bar">|</span> _identifier_</td></tr>
<tr><td>_identifier_</td><td>::=</td><td>_varid_ <span class="bar">|</span> _idop_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_qoperator_</td><td>::=</td><td>_op_ <span class="bar">|</span> <code>&#96;</code> (_qidentifier_ <span class="bar">|</span> _qconstructor_) <code>&#96;</code> </td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_qconstructor_</td><td>::=</td><td>_conid_ <span class="bar">|</span> _qconid_</td></tr>
</table>

## Statements

<table class="grammar parse">
<tr><td>_block_</td><td>::=</td><td>`{` <span class="opt">[_semis_]</span> <span class="many">{ _statement_ _semis_ }</span> `}`</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_statement_</td><td>::=</td><td>_nofunexpr_</td><td></td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_decl_</td><td></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_decl_</td><td>::=</td><td>("fun" <span class="bar">|</span> "function") _fundecl_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"val" _pattern_ "=" _valexpr_</td><td>(local values can use a pattern binding)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_valdecl_</td><td>(local values have an optional `val` keyword)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"var" _binder_ `:=` _valexpr_</td></tr>
</table>

## Expressions
<table class="grammar parse">
<tr><td>_blockexpr_</td><td>::=</td><td>_funexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_nofunexpr_</td><td>(implicitly wrapped in a block)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_expr_</td><td>::=</td><td>_funexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_nofunexpr_</td><td>(_returnexpr_ not allowed)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_nofunexpr_</td><td>::=</td><td>_matchexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_opexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_ifexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_returnexpr_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_noifexpr_</td><td>::=</td><td>_matchexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_opexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_returnexpr_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_funexpr_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_ifexpr_</td><td>::=</td><td>"if" _atom_ _then_ <span class="many">{ _elif_ }</span> <span class="opt">["else" _noifexpr_]</span></td></tr>
<tr><td>_then_</td><td>::=</td><td><span class="opt">["then"]</span> _noifexpr_</td></tr>
<tr><td>_elif_</td><td>::=</td><td>"elif" _atom_ _then_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_matchexpr_</td><td>::=</td><td>"match" _atom_ "{" <span class="opt">[_semis_]</span> <span class="many">{ _matchrule_ _semis_ }</span> "}"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_returnexpr_</td><td>::=</td><td>"return" _noifexpr_</td><td>(but no _returnexpr_ allowed)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_funexpr_</td><td>::=</td><td>("fun" <span class="bar">|</span> "function") <span class="opt">[_quantifiers_]</span> _fundef_ _block_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_block_</td><td>(zero-argument anonymous function)</td></tr>
</table>

## Operator expressions

For simplicity, we parse all operators as if they are left associative with
the same precedence. We assume that a separate pass in the compiler will use
the fixity declarations that are in scope to properly associate all operators
in an expressions.

<table class="grammar parse">
<tr><td>_opexpr_</td><td>::=</td><td>_fappexpr_ <span class="many">{ _qoperator_ _fappexpr_ }</span></td></tr>
<tr><td>_fappexpr_</td><td>::=</td><td>_appexpr_ <span class="many">{ _funexpr_ }</span></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_appexpr_</td><td>::=</td><td>_appexpr_ "(" <span class="opt">[_arguments_]</span> ")"</td><td>(regular application)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_appexpr_ "[" <span class="opt">[_arguments_]</span> "]"</td><td>(index operation)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_appexpr_ "." _prefix_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_prefix_</td></tr>
<tr><td>_prefix_</td><td>::=</td><td><span class="many">{ _qoperator_ }</span> _atom_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_arguments_</td><td>::=</td><td>_argument_ <span class="many">{ "," _argument_ }</span></td></tr>
<tr><td>_argument_</td><td>::=</td><td><span class="opt">[_identifier_ "="]</span> _expr_</td></tr>
</table>

In the grammer we use the dot (".") for both qualifying identifiers with a
module name, but also for &ldquo;dot&rdquo; expressions' where "e.f(x)" is
syntactic sugar for the application "f(e,x)". When we combine module
qualification with dot expressions, we can get expressions like
`List.primes.List.map(sqr)` where we map the squaring function over the list
of prime numbers. Note that the grammar is still LALR(1) since qualified names
are returned as single tokens by the lexical analyzer, i.e. `List.primes` and
`List.map`.

## Atomic expressions

<table class="grammar parse">
<tr><td>_atom_</td><td>::=</td><td>_qidentifier_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_qconstructor_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_literal_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" ")"</td><td>(unit)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" _annexpr_ ")"</td><td>(parenthesized expression)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" _annexprs_ ")"</td><td>(tuple expression)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"[" <span class="opt">[_annexprs_ <span class="opt">[","]</span>]</span> "]"</td><td>(list expression)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_literal_</td><td>::=</td><td>_natural_ <span class="bar">|</span> _float_ <span class="bar">|</span> _char_ <span class="bar">|</span> _string_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_annexprs_</td><td>::=</td><td>_annexpr_ <span class="many">{ "," _annexpr_ }</span></td></tr>
<tr><td>_annexpr_</td><td>::=</td><td>_expr_ <span class="opt">[ `:` _typescheme_ ]</span></td></tr>
</table>

## Matching

<table class="grammar parse">
<tr><td>_matchrule_</td><td>::=</td><td>_patterns_ <span class="opt">[_guard_]</span> "->" _branchexpr_</td></tr>
<tr><td>_guard_</td><td>::=</td><td><span class="koka code">|</span> _compound_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_pattern_</td><td>::=</td><td>_identifier_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_wildcard_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_qconstructor_ <span class="opt">["(" [_patargs_]</span> ")"]</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" <span class="opt">[_patterns_]</span> ")"</td><td>(unit, parenthesized pattern, tuple pattern)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"[" <span class="opt">[_patterns_]</span> "]"</td><td>(list pattern)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_pattern_ "as" _identifier_</td><td>(named pattern)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_literal_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_patterns_</td><td>::=</td><td>_pattern_ <span class="many">{ "," _pattern_ }</span></td></tr>
<tr><td>_patargs_</td><td>::=</td><td>_patarg_ <span class="many">{ "," _patarg_ }</span></td></tr>
<tr><td>_patarg_</td><td>::=</td><td><span class="opt">[_identifier_ "="]</span> _pattern_</td><td>(possibly named parameter)</table>

## Type schemes

<table class="grammar parse">
<tr><td>_typesig_</td><td>::=</td><td><span class="opt">[_quantifiers_]</span> _tarrow_ <span class="opt">[_sigqualifier_]</span></td></tr>
<tr><td>_typescheme_</td><td>::=</td><td><span class="opt">[_quantifiers_]</span> _tarrow_ <span class="opt">[_qualifier_]</span></td></tr>
<tr><td>_type_</td><td>::=</td><td><span class="opt">[_aquantifier_]</span> _tarrow_ <span class="opt">[_qualifier_]</span></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_quantifiers_</td><td>::=</td><td><span class="opt">[_squantifier_]</span> <span class="opt">[_aquantifier_]</span></td></tr>
<tr><td>_aquantifier_</td><td>::=</td><td>"forall" "<" _tbinders_ ">"</td></tr>
<tr><td>_squantifier_</td><td>::=</td><td>"some" "<" _tbinders_ ">"</td></tr>
<tr><td>_equantifier_</td><td>::=</td><td>"exists" "<" _tbinders_ ">"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_sigqualifier_</td><td>::=</td><td>"with" _predicates_ <span class="bar">|</span> _qualifier_</td></tr>
<tr><td>_qualifier_</td><td>::=</td><td>"with" "(" _predicates_ ")"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_predicates_</td><td>::=</td><td>_predicate_ <span class="many">{ "," _predicate_ }</span></td></tr>
<tr><td>_predicate_</td><td>::=</td><td>_typeapp_</td><td>(interface)</table>

## Types

<table class="grammar parse">
<tr><td>_tarrow_</td><td>::=</td><td>_tatom_ <span class="opt">["->" _tresult_]</span></td></tr>
<tr><td>_tresult_</td><td>::=</td><td>_tatom_ <span class="opt">[_tbasic_]</span></td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_tatom_</td><td>::=</td><td>_tbasic_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"<" _anntype_ <span class="many">{ "," _anntype_ }</span> <span class="opt">[ <span class="koka code">|</span> _tatom_ ]</span> ">"</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"<" ">"</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_tbasic_</td><td>::=</td><td>_typeapp_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" ")"</td><td>(unit type)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" _tparam_ ")"</td><td>(parenthesized type or type parameter)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" _tparam_ <span class="many">{ "," _tparam_ }</span> ")"</td><td>(tuple type or parameters)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"[" _anntype_ "]"</td><td>(list type)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_typeapp_</td><td>::=</td><td>_typecon_ <span class="opt">["<" [_anntype_ <span class="many">{ "," _anntype_ }</span>]</span> ">"]</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_typecon_</td><td>::=</td><td>_varid_ <span class="bar">|</span> _qvarid_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_wildcard_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" "," <span class="many">{ "," }</span> ")"</td><td>(tuple constructor)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"[" "]"</td><td>(list constructor)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"(" "->" ")"</td><td>(function constructor)</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_tparam_</td><td>::=</td><td><span class="opt">[_varid_ `:` ]</span> _anntype_</td></tr>
<tr><td>_anntype_</td><td>::=</td><td>_type_ <span class="opt">[_kannot_]</span>
</table>

## Kinds

<table class="grammar parse">
<tr><td>_kannot_</td><td>::=</td><td>`::` _kind_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_kind_</td><td>::=</td><td>"(" _kind_ <span class="many">{ "," _kind_ }</span> ")" "->" _kind_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_katom_ "->" _kind_</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>_katom_</td></tr>
<tr><td>&nbsp;</td></tr>
<tr><td>_katom_</td><td>::=</td><td>"V"</td><td>(value type)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"X"</td><td>(effect type)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"E"</td><td>(effect row)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"H"</td><td>(heap type)</td></tr>
<tr><td></td><td><span class="bar">|</span></td><td>"P"</td><td>(predicate type)</table>

## Implementation

As a companion to the Flex lexical implementation, there is a full 
[Bison(Yacc) LALR(1) implementation](https://koka.codeplex.com/SourceControl/latest#doc/spec/grammar/parser.y) 
available. Again, the Bison parser functions
as _the_ specification of the grammar and this document should always
be in agreement with that implementation.

<h1 class="notoc">Appendix

<h1 class="appendix">Complete syntax definition

</xmp>
</body>
</html>
